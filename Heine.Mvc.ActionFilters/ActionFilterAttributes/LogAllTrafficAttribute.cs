using System.Diagnostics;
using System.Net;
using System.Web.Http.Controllers;
using System.Web.Http.Filters;
using Heine.Mvc.ActionFilters.Extensions;
using Heine.Mvc.ActionFilters.Interfaces;
using NLog;

namespace Heine.Mvc.ActionFilters.ActionFilterAttributes
{
    /// <summary>
    ///     Filter for logging all API calls registered on the API.
    /// </summary>
    /// <remarks>
    ///     Placement of this filter is crucial if it should catch information generated by other filters.
    ///     Note: Responses set through exceptions will not be logged through this filter.
    ///     Note 2: Requests stopped before hitting this filter will not be logged.
    /// </remarks>
    public sealed class LogAllTrafficAttribute : ActionFilterAttribute, IOrderableFilter
    {
        private ILogger Logger { get; } = LogManager.GetLogger(typeof(LogAllTrafficAttribute).FullName);

        public int Order { get; set; }

        public bool NotFoundStatusAsWarning { get; set; } = false;

        private Stopwatch stopwatch;

        public override void OnActionExecuting(HttpActionContext actionContext)
        {
            stopwatch = Stopwatch.StartNew();

            HttpRequestLoggerExtensions.Debug(Logger, actionContext.Request); 

            base.OnActionExecuting(actionContext);
        }

        /// <inheritdoc />
        public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext)
        {
            if (actionExecutedContext.Response != null)
            {
                var request = actionExecutedContext.Request;
                var response = actionExecutedContext.Response;

                if (response.IsSuccessStatusCode)
                    Logger.Debug(stopwatch, request, response, "Request + Response\n");

                else if(!NotFoundStatusAsWarning && response.StatusCode == HttpStatusCode.NotFound)
                    Logger.Debug(stopwatch, request, response, "Request + Response\n");

                else if (response.StatusCode < HttpStatusCode.InternalServerError)
                    Logger.Warn(stopwatch, request, response, "Request + Response\n");

                else
                    Logger.Error(stopwatch, request, response, "Request + Response\n");
            }

            stopwatch.Reset();

            base.OnActionExecuted(actionExecutedContext);
        }
    }
}