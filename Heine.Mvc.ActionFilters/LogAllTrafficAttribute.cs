using System.Web.Http.Controllers;
using System.Web.Http.Filters;
using Heine.Mvc.ActionFilters.Extensions;
using NLog;

namespace Heine.Mvc.ActionFilters
{
    /// <summary>
    /// Filter for logging all api calls registered on the api. 
    /// </summary>
    /// <remarks>
    /// Placement of this filter is crucial if it should catch information generated by other filters.
    /// Note: Responses set through exceptions will not be logged through this filter.
    /// Note 2: Requests stopped before hitting this filter will not be logged. 
    /// </remarks>
    public class LogAllTrafficAttribute : ActionFilterAttribute
    {
        /// <inheritdoc />
        public override void OnActionExecuting(HttpActionContext actionContext)
        {
            LogManager.GetCurrentClassLogger().Debug("Request: {0}", actionContext.Request.AsFormattedString());

            base.OnActionExecuting(actionContext);
        }

        /// <inheritdoc />
        public override void OnActionExecuted(HttpActionExecutedContext actionExecutedContext)
        {
            if (actionExecutedContext.Response != null)
            {
                if (actionExecutedContext.Response.IsSuccessStatusCode)
                    LogManager.GetCurrentClassLogger().Debug("Response: {0}", actionExecutedContext.Response.AsFormattedString());

                else if ((int)actionExecutedContext.Response.StatusCode < 500)
                    LogManager.GetCurrentClassLogger().Warn("Response: {0}", actionExecutedContext.Response.AsFormattedString());

                else
                    LogManager.GetCurrentClassLogger().Error("Response: {0}", actionExecutedContext.Response.AsFormattedString());
            }

            base.OnActionExecuted(actionExecutedContext);
        }
    }
}
